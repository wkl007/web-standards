(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{444:function(e,t,r){"use strict";r.r(t);var v=r(28),a=Object(v.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"工作流规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工作流规范"}},[e._v("#")]),e._v(" 工作流规范")]),e._v(" "),r("h2",{attrs:{id:"开发"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开发"}},[e._v("#")]),e._v(" 开发")]),e._v(" "),r("h3",{attrs:{id:"版本规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#版本规范"}},[e._v("#")]),e._v(" 版本规范")]),e._v(" "),r("p",[e._v("项目的版本号应该根据某些规则进行迭代，这里推荐使用"),r("a",{attrs:{href:"https://semver.org/lang/zh-CN/",target:"_blank",rel:"noopener noreferrer"}},[e._v("语义化版本"),r("OutboundLink")],1),e._v("规范。 "),r("strong",[e._v("通过这个规范，用户可以了解版本变更的影响范围")]),e._v("。 规则如下：")]),e._v(" "),r("ul",[r("li",[e._v("主版本号：当你做了不兼容的 API 修改，")]),e._v(" "),r("li",[e._v("次版本号：当你做了向下兼容的功能性新增，")]),e._v(" "),r("li",[e._v("修订号：当你做了向下兼容的问题修正。")])]),e._v(" "),r("h3",{attrs:{id:"版本控制系统规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#版本控制系统规范"}},[e._v("#")]),e._v(" 版本控制系统规范")]),e._v(" "),r("p",[e._v("大部分团队都使用"),r("code",[e._v("git")]),e._v("作为版本库，管理好代码也是一种学问。尤其是涉及多人并发协作、需要管理多个软件版本的情况下，定义良好的版本库管理规范，可以让大型项目更有组织性，也可以提高成员协作效率。")]),e._v(" "),r("p",[e._v("比较流行的"),r("code",[e._v("git")]),e._v("分支模型/工作流是"),r("a",{attrs:{href:"https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow",target:"_blank",rel:"noopener noreferrer"}},[e._v("git-flow"),r("OutboundLink")],1),e._v("，但是大部分团队会根据自己的情况制定自己的git工作流规范。目前公司前端研发"),r("code",[e._v("git")]),e._v("分支模型如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("├── release\n├── master\n├── dev\n├── member1\n└── member2\n")])])]),r("h4",{attrs:{id:"release分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#release分支"}},[e._v("#")]),e._v(" release分支")]),e._v(" "),r("p",[r("code",[e._v("release")]),e._v("分支表示一个已发布版本【用户正在使用的版本】。")]),e._v(" "),r("ul",[r("li",[e._v("场景："),r("code",[e._v("master")]),e._v("分支测试完毕后会合并到"),r("code",[e._v("release")]),e._v("分支， 并使用"),r("code",[e._v("Tag")]),e._v("标记应用版本和对应的工作版本。")]),e._v(" "),r("li",[r("code",[e._v("Tag")]),e._v("规范："),r("code",[e._v("v{主版本号}.{次版本号}.{修订号}")]),e._v("， 例如v0.1.0。")]),e._v(" "),r("li",[e._v("人员：由项目负责人进行审核合并、普通开发者没有权限。")])]),e._v(" "),r("h4",{attrs:{id:"master分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#master分支"}},[e._v("#")]),e._v(" master分支")]),e._v(" "),r("p",[r("code",[e._v("master")]),e._v("分支表示一个预发布版本【测试人员使用的版本】。")]),e._v(" "),r("ul",[r("li",[e._v("场景：前端应用会跟随工作版本迭代，在"),r("code",[e._v("dev")]),e._v("分支自测稳定后，会合并到"),r("code",[e._v("master")]),e._v("分支， 并使用"),r("code",[e._v("Tag")]),e._v("标记应用版本和对应的工作版本。")]),e._v(" "),r("li",[r("code",[e._v("Tag")]),e._v("规范："),r("code",[e._v("v{主版本号}.{次版本号}.{修订号}")]),e._v("， 例如v0.1.0。")]),e._v(" "),r("li",[e._v("人员：由项目负责人进行审核合并、普通开发者没有权限。")])]),e._v(" "),r("h4",{attrs:{id:"dev分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dev分支"}},[e._v("#")]),e._v(" dev分支")]),e._v(" "),r("p",[r("code",[e._v("dev")]),e._v("分支表示正在开发中的版本。")]),e._v(" "),r("p",[e._v("最新的特性或"),r("code",[e._v("Bug")]),e._v("修复都会提交到这个分支，开发者如果在该分支进行了提交，在"),r("code",[e._v("push")]),e._v("到远程之前应该先"),r("code",[e._v("pull")]),e._v("一下， 并尽量使用"),r("code",[e._v("rebase")]),e._v("模式，保证分支的简洁。")]),e._v(" "),r("ul",[r("li",[e._v("命名规范："),r("code",[e._v("dev")]),e._v("。")]),e._v(" "),r("li",[r("code",[e._v("Tag")]),e._v("规范：在dev分支中也可能会经历发布过程， 例如"),r("code",[e._v("Bug")]),e._v("修复版本. 这里同样使用"),r("code",[e._v("Tag")]),e._v("来标记这些发布. 例如v0.1.1。")]),e._v(" "),r("li",[e._v("人员：项目负责人、普通开发者。")])]),e._v(" "),r("h4",{attrs:{id:"member分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#member分支"}},[e._v("#")]),e._v(" member分支")]),e._v(" "),r("p",[r("code",[e._v("member")]),e._v("分支表示项目成员各自的分支。")]),e._v(" "),r("p",[e._v("开发者对应模块开发完毕要提交到项目成员各自分支上并同步到"),r("code",[e._v("dev")]),e._v("分支上。")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("场景：")]),e._v(" "),r("ul",[r("li",[e._v("涉及多人协作：团队多个成员在同一个项目下负责开发不同的功能，这时候每个成员在自己的member分支独立开发。")]),e._v(" "),r("li",[e._v("大功能开发：大功能开发跨越周期比较长，需要多次迭代才会稳定。这时候应该在独立的分支上开发，方便跟踪历史记录，也免于干扰"),r("code",[e._v("dev")]),e._v("分支的迭代和发布。")])])]),e._v(" "),r("li",[r("p",[e._v("命名规范："),r("code",[e._v("{项目成员英文姓名}")]),e._v(" 如："),r("code",[e._v("zhangsan")]),e._v("。")])]),e._v(" "),r("li",[r("p",[e._v("提交规范：如果是在开发分支上进行开发，在推送到远程之前，应该使用"),r("code",[e._v("git rebase")]),e._v("形式更新本地分支。")])]),e._v(" "),r("li",[r("p",[e._v("人员：普通开发者。")])])]),e._v(" "),r("h3",{attrs:{id:"提交信息规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#提交信息规范"}},[e._v("#")]),e._v(" 提交信息规范")]),e._v(" "),r("p",[e._v("组织好的提交信息， 可以提高项目的整体质量. 至少具有下面这些优点：")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("格式统一的提交信息有助于自动化生成CHANGELOG")]),e._v("。")]),e._v(" "),r("li",[r("strong",[e._v("版本库不只是存放代码的仓库，它记录项目的开发日志，它应该要清晰表达这次提交的做了什么")]),e._v("。 这些记录应该可以帮助后来者快速地学习和回顾代码， 也应该方便其他协作者review你的代码。")]),e._v(" "),r("li",[r("strong",[e._v("规范化提交信息可以促进提交者提交有意义的、粒度合适的'提交'")]),e._v("。提交者要想好要怎么描述这个提交，这样被动促进了他们去把控"),r("strong",[e._v("提交的粒度")]),e._v("。")])]),e._v(" "),r("p",[e._v("社区上比较流行的提交信息规范是"),r("a",{attrs:{href:"https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit",target:"_blank",rel:"noopener noreferrer"}},[e._v("Angular的提交信息规范"),r("OutboundLink")],1),e._v("， 除此之外，这些也很不错：")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/atom/atom/blob/master/CONTRIBUTING.md#git-commit-messages",target:"_blank",rel:"noopener noreferrer"}},[e._v("Atom"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-ember",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ember"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-eslint",target:"_blank",rel:"noopener noreferrer"}},[e._v("Eslint"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-jquery",target:"_blank",rel:"noopener noreferrer"}},[e._v("JQuery"),r("OutboundLink")],1)])]),e._v(" "),r("p",[e._v("另外这些工具可以帮助你检验提交信息， 以及生成CHANGELOG：")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[e._v("conventional-changelog"),r("OutboundLink")],1),e._v(" - 从项目的提交信息中生成CHANGELOG和发布信息")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/commitlint",target:"_blank",rel:"noopener noreferrer"}},[e._v("commitlint"),r("OutboundLink")],1),e._v(" - 检验提交信息")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"}},[e._v("commitizen"),r("OutboundLink")],1),e._v(" - 🔥简单的提交规范和提交帮助工具，推荐")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/commitlint",target:"_blank",rel:"noopener noreferrer"}},[e._v("standard-changelog"),r("OutboundLink")],1),e._v(" - angular风格的提交命令行工具")])]),e._v(" "),r("p",[e._v("目前公司前端研发采用"),r("a",{attrs:{href:"https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit",target:"_blank",rel:"noopener noreferrer"}},[e._v("Angular的提交信息规范"),r("OutboundLink")],1),e._v("，它的"),r("code",[e._v("message")]),e._v("格式如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("<type>(<scope>)： <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n")])])]),r("p",[e._v("说明：")]),e._v(" "),r("ul",[r("li",[e._v("标题行：必填，描述主要修改类型和内容")]),e._v(" "),r("li",[e._v("主题内容：选填，描述为什么修改， 做了什么样的修改， 以及开发的思路等等")]),e._v(" "),r("li",[e._v("页脚注释：选填，放 Breaking Changes 或 Closed Issues")])]),e._v(" "),r("p",[e._v("我们可以通过"),r("code",[e._v("git-cz")]),e._v("插件可视化界面填写"),r("code",[e._v("message")]),e._v("信息，也可以通过"),r("code",[e._v("commmit -m 'feat： 新增xxx功能'")]),e._v("来生成"),r("code",[e._v("message")]),e._v("信息。")]),e._v(" "),r("h2",{attrs:{id:"构建规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建规范"}},[e._v("#")]),e._v(" 构建规范")]),e._v(" "),r("p",[e._v("对于团队、或者需要维护多个项目场景，统一的构建工具链很重要， "),r("strong",[e._v('这套工具应该强调"约定大于配置"，让开发者更专注于业务的开发')]),e._v("。")]),e._v(" "),r("p",[e._v("下面是社区上比较流行的构建工具：")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://cli.vuejs.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-cli"),r("OutboundLink")],1),e._v(" - 🔥零配置、渐进增强的项目构建CLI")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/facebook/create-react-app",target:"_blank",rel:"noopener noreferrer"}},[e._v("create-react-app"),r("OutboundLink")],1),e._v(" - 🔥零配置开始React开发")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://parceljs.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("parcel"),r("OutboundLink")],1),e._v(" - 零配置的Web应用打包工具")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/fuse-box/fuse-box",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fusebox"),r("OutboundLink")],1),e._v(" - 高速易用的打包工具")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/developit/microbundle",target:"_blank",rel:"noopener noreferrer"}},[e._v("microbundle"),r("OutboundLink")],1),e._v(" - 零配置， 基于Rollup，适合用于打包‘库’")])]),e._v(" "),r("p",[e._v("目前公司前端主要使用"),r("a",{attrs:{href:"https://cli.vuejs.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-cli"),r("OutboundLink")],1),e._v("构建工具进行开发。")]),e._v(" "),r("h2",{attrs:{id:"发布工作流规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#发布工作流规范"}},[e._v("#")]),e._v(" 发布工作流规范")]),e._v(" "),r("p",[e._v("发布工作流指的是将‘软件成品’对外发布(如测试或生产)的一套流程， 将这套流程规范化后，可以实现自动化.")]),e._v(" "),r("p",[e._v("举个例子， 一个典型的发布工作流如下：")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://pic-go-1256738511.cos.ap-chengdu.myqcloud.com/images/20201103150115.png",alt:"chapter1_1"}})]),e._v(" "),r("ul",[r("li",[e._v("代码变更")]),e._v(" "),r("li",[e._v("提交代码变更到远程版本库")]),e._v(" "),r("li",[e._v("程序通过CI测试(例如Travis CI变绿)")]),e._v(" "),r("li",[e._v("提升package.json中的版本")]),e._v(" "),r("li",[e._v("生成CHANGELOG")]),e._v(" "),r("li",[e._v("提交package.json和CHANGELOG.md文件")]),e._v(" "),r("li",[e._v("打上Tag")]),e._v(" "),r("li",[e._v("推送")])]),e._v(" "),r("p",[e._v("如果你遵循上面的规范，那么就可以利用社区上现有的工具来自动化这个流程. 这些工具有：")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli",target:"_blank",rel:"noopener noreferrer"}},[e._v("conventional-changelog-cli"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-github-releaser",target:"_blank",rel:"noopener noreferrer"}},[e._v("conventional-github-releaser"),r("OutboundLink")],1)])]),e._v(" "),r("h2",{attrs:{id:"持续集成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#持续集成"}},[e._v("#")]),e._v(" 持续集成")]),e._v(" "),r("p",[e._v("将整套开发工作流确定下来之后， 就可以使用"),r("code",[e._v("持续集成服务")]),e._v("来自动化执行整个流程。比如一个典型的CI流程：")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://pic-go-1256738511.cos.ap-chengdu.myqcloud.com/images/20201103150122.png",alt:"chapter1_2"}})]),e._v(" "),r("p",[r("strong",[e._v("持续集成是什么，有什么意义呢")]),e._v("?")]),e._v(" "),r("p",[e._v("我们需要"),r("code",[e._v("持续集成")]),e._v("拆成两个词分别来理解， 什么是"),r("code",[e._v("持续")]),e._v("? 什么是"),r("code",[e._v("集成")]),e._v("?")]),e._v(" "),r("p",[r("strong",[e._v("持续(Continuous)， 可以理解为'频繁'或者‘连续性’")]),e._v(". 不管是持续集成还是敏捷开发思维、看板，都认为‘持续’是它们的基础。")]),e._v(" "),r("p",[e._v("举一个通俗的例子，"),r("strong",[e._v("比如代码检查，‘持续的’的代码检查就是代码一变动(如保存，或者IDE实时检查、或者提交到版本库时)就马上检查代码，而‘非持续’的代码检查就是在完成所有编码后，再进行检查")]),e._v("。对比两者可以发现，持续性的代码检查可以尽早地发现错误，而且错误也比较容易理解和处理，反之非持续性的代码检查，可能会发现一堆的错误，失之毫厘谬以千里，错误相互牵连，最终会变得难以收拾。")]),e._v(" "),r("p",[r("strong",[e._v("‘持续’的概念，可以用于软件开发的方方面面，本质上就是把传统瀑布式的软件开发流程打碎，形成一个个更小的开发闭环，持续地输出产品，同时产品也持续地给上游反馈和纠正")]),e._v("。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://pic-go-1256738511.cos.ap-chengdu.myqcloud.com/images/20201103150126.png",alt:"chapter1_3"}})]),e._v(" "),r("p",[r("strong",[e._v("那什么是‘集成’呢")]),e._v("？狭义的集成可以简单认为是"),r("a",{attrs:{href:"https://juejin.im/post/5d2c515d6fb9a07ead5a2bbe#heading-26",target:"_blank",rel:"noopener noreferrer"}},[e._v("‘集成测试’"),r("OutboundLink")],1),e._v("。集成测试可以对代码静态测试、单元测试、通过单元测试后可以进行集成测试，在应用组成一个整体后在模拟环境中跑E2E测试等等。也就是说，在这里进行一系列的自动化测试来验证软件系统。")]),e._v(" "),r("p",[e._v("广义的持续集成服务，不仅仅是测试，它还衍生出很多概念，例如持续交付、持续部署，如下图")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://pic-go-1256738511.cos.ap-chengdu.myqcloud.com/images/20201103150130.png",alt:"chapter1_4"}})]),e._v(" "),r("p",[e._v("OK， "),r("strong",[e._v("总结一下为什么持续集成的好处")]),e._v("：")]),e._v(" "),r("ul",[r("li",[e._v("尽早发现错误，快速试错。越早发现错误，处理错误的成本越低")]),e._v(" "),r("li",[e._v("自动化工作流，减少人工干预。人类比机器容易犯错， 而且机器擅长做重复的事情")])]),e._v(" "),r("p",[r("strong",[e._v("对于持续集成规范一般会定义这些内容")]),e._v("：")]),e._v(" "),r("ul",[r("li",[e._v("执行的环境. 比如容器、Node版本、操作系统等等")]),e._v(" "),r("li",[e._v("触发的条件。比如定时触发、在哪个分支触发、会触发什么任务等等")]),e._v(" "),r("li",[e._v("执行的任务")]),e._v(" "),r("li",[e._v("划分持续集成的阶段. 比如\n"),r("ul",[r("li",[e._v("检查：包括单元测试和代码lint. 所有push到版本库的代码都会跑这个阶段. 一般可以在提交title中包含[ci skip]来跳过这个阶段")]),e._v(" "),r("li",[e._v("构建： 对前端项目进行构建. 只有打上版本tag的提交或release分支会跑构建任务")]),e._v(" "),r("li",[e._v("发布： 将前端的构建结果进行交付/发布.  只有打上版本tag的提交或者release分支在构建成功后会跑发布任务")])])]),e._v(" "),r("li",[e._v("定义持续集成脚本模板")])]),e._v(" "),r("p",[e._v("常用的CI服务：")]),e._v(" "),r("ul",[r("li",[e._v("GitHub\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/marketplace/travis-ci",target:"_blank",rel:"noopener noreferrer"}},[e._v("Travis CI"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/marketplace/circleci",target:"_blank",rel:"noopener noreferrer"}},[e._v("CircleCI"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/marketplace/category/continuous-integration",target:"_blank",rel:"noopener noreferrer"}},[e._v("完整列表"),r("OutboundLink")],1)])])]),e._v(" "),r("li",[e._v("GitLab： "),r("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gitlab-CI"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("通用\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://jenkins.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("Jenkins"),r("OutboundLink")],1)])])])]),e._v(" "),r("p",[e._v("扩展")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://juejin.im/post/58f9ee860ce46300611be392",target:"_blank",rel:"noopener noreferrer"}},[e._v("持续集成是什么"),r("OutboundLink")],1)])]),e._v(" "),r("p",[e._v("目前公司前端开发部分未添加持续集成功能。")])])}),[],!1,null,null,null);t.default=a.exports}}]);